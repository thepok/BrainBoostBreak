@page "/quiz"
@using BrainBoostBreak.Shared
@inject HttpClient Http
@inject IJSRuntime JsRuntime;


@if (Result != null)
{
    <h1>Letze Frage:</h1>

    @Result.Text

}
<br />

<h1>Nächste Frage</h1>

@if (Question == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @Question.Text
    <br />
    <br />
    foreach (var answer in Question.Answers)
    {
        @if (answer.Id == SelectedAnswerId)
        {
            <div class="question selected" @onclick="@(() => GetNext(Question.Id, answer.Id))">@answer.Text</div>
        } else {
            <div class="question" @onclick="@(()=>GetNext(Question.Id, answer.Id))">@answer.Text</div>
        }
    }
}

@code {

    QuestionTO _question;
    QuestionTO Question
    {
        get
        {
            return _question;
        }
        set
        {
            _question = value;
            StateHasChanged();
            JsRuntime.InvokeAsync<object>("speak", Question.Text);
        }
    }

    QuestionTO NextQuestion;

    ResultTO _result;
    ResultTO Result
    {
        get { return _result; }
        set
        {
            _result = value;
            StateHasChanged();
        }
    }

    [Parameter]
    public int QuestionId { get; set; }

    [Parameter]
    public int AnswerId { get; set; }

    int SelectedAnswerId { get; set; }

    protected override async Task OnInitAsync()
    {
        Question = await Http.GetJsonAsync<QuestionTO>("Question");

        NextQuestion = await Http.GetJsonAsync<QuestionTO>("Question");
    }

    public async Task GetNext(int questionId, int answerId)
    {
        SelectedAnswerId = answerId;

        Question = NextQuestion;

        NextQuestion = await Http.GetJsonAsync<QuestionTO>("Question");

        if (Question == null)
        {
            Question = NextQuestion;
        }

        Result = await Http.GetJsonAsync<ResultTO>(@"Result\" + questionId + @"\" + answerId);

    }
}
