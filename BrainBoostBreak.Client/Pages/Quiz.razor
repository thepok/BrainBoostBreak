@page "/quiz"
@page "/"
@using BrainBoostBreak.Shared
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@inject BBBModel BBB


@if (Question == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @Question.Text
    <br />
    <br />
    foreach (var answer in Question.Answers)
    {
        @if (Answered && answer.Id == Question.CorrectAnswerId)
        {
            <div class="question success" @onclick="@(()=>GetNext(Question.Id, answer.Id))">@answer.Text</div>
        }
        else if (Answered && answer.Id == SelectedAnswerId)
        {
            <div class="question selected" @onclick="@(() => GetNext(Question.Id, answer.Id))">@answer.Text</div>
        }
        else
        {
            <div class="question" @onclick="@(()=>GetNext(Question.Id, answer.Id))">@answer.Text</div>
        }
    }
}

@code {

    QuestionTO _question;
    QuestionTO Question
    {
        get
        {
            return _question;
        }
        set
        {
            _question = value;
            StateHasChanged();
            Speak(Question.Text);
        }
    }

    QuestionTO NextQuestion;

    ResultTO _result;
    ResultTO Result
    {
        get { return _result; }
        set
        {
            _result = value;
            StateHasChanged();
            Speak(value.Text);
        }
    }

    [Parameter]
    public int QuestionId { get; set; }

    [Parameter]
    public int AnswerId { get; set; }

    private void Speak(string text)
    {
        if (BBB.UseVoiceSystem == false)
            return;
        JsRuntime.InvokeAsync<object>("speak", text);
    }

    bool Answered { get; set; }

    int SelectedAnswerId { get; set; }

    Task<QuestionTO> GetQuestionFromServer()
    {

        var enabledTopics = BBB.Topics.Where(t => t.Enabled).ToArray();

        return Http.GetJsonAsync<QuestionTO>("Question/" + enabledTopics[BBB.Rnd.Next(enabledTopics.Length)].Id);
    }

    protected override async Task OnInitializedAsync()
    {
        if(BBB.Topics.Length==0)
        {
            BBB.Topics = (await Http.GetJsonAsync<TopicsTO>("api/topics")).Topics;
        }
        Question = await GetQuestionFromServer();

        NextQuestion = await GetQuestionFromServer();
    }

    public async Task GetNext(int questionId, int answerId)
    {
        Answered = true;

        if (answerId == Question.CorrectAnswerId)
        {
            Result = new ResultTO() { Correct = true, Text = "Richtig" };
        }
        else
        {
            Result = new ResultTO() { Correct = false, Text = "Falsch" };
        }

        SelectedAnswerId = answerId;

        StateHasChanged();

        await Task.Delay(2000);

        Answered = false;

        Question = NextQuestion;

        NextQuestion = await GetQuestionFromServer();

        if (Question == null)
        {
            Question = NextQuestion;
        }

    }
}
