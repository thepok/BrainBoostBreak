@page "/quiz"
@page "/"
@using BrainBoostBreak.Shared
@inject HttpClient Http
@inject IJSRuntime JsRuntime;


@if (Result != null)
{
    <h1>Letze Frage:</h1>

    @Result.Text

}
<br />

<h1>Nächste Frage</h1>

@if (Question == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @Question.Text
    <br />
    <br />
    foreach (var answer in Question.Answers)
    {
        <button @onclick="@(()=>GetNext(Question.Id, answer.Id))" style="width:100%">@answer.Text</button>
        <br />
    }
}

@code {

    QuestionTO _question;
    QuestionTO Question
    {
        get
        {
            return _question;
        }
        set
        {
            _question = value;
            StateHasChanged();
            Speak(Question.Text);
        }
    }

    QuestionTO NextQuestion;

    ResultTO _result;
    ResultTO Result
    {
        get { return _result; }
        set
        {
            _result = value;
            StateHasChanged();
            Speak(value.Text);
        }
    }




    [Parameter]
    public int QuestionId { get; set; }

    [Parameter]
    public int AnswerId { get; set; }

    private void Speak(string text)
    {
        JsRuntime.InvokeAsync<object>("speak", text);
    }

    protected override async Task OnInitAsync()
    {

        Http.GetJsonAsync<QuestionTO>("Question").ContinueWith(q =>
        {
            Question = q.Result;
        });
        Http.GetJsonAsync<QuestionTO>("Question").ContinueWith(q =>
        {
            NextQuestion = q.Result;
        });
    }

    public async void GetNext(int questionId, int answerId)
    {
        if (answerId == Question.CorrectAnswerId)
        {
            Result = new ResultTO() { Correct = true, Text = "Richtig" };
        }
        else
        {
            Result = new ResultTO() { Correct = false, Text = "Falsch" };
        }

        Question = NextQuestion;
        NextQuestion = null;

        Http.GetJsonAsync<QuestionTO>("Question").ContinueWith(q =>
        {
            NextQuestion = q.Result;
            if (Question == null)
            {
                Question = NextQuestion;
            }
        });
    }
}
